/* generated by Svelte vX.Y.Z-alpha1 */
import { SvelteComponent as SvelteComponent_1, addListener, createElement, detachNode, flush, init, insert, removeListener, run, safe_not_equal, setAttribute, toNumber } from "svelte/internal.js";

function create_fragment(component, ctx) {
	var input, current;

	return {
		c() {
			input = createElement("input");
			addListener(input, "change", ctx.input_change_input_handler);
			addListener(input, "input", ctx.input_change_input_handler);
			setAttribute(input, "type", "range");
		},

		m(target, anchor) {
			insert(target, input, anchor);

			input.value = ctx.value;

			current = true;
		},

		p(changed, ctx) {
			if (changed.value) input.value = ctx.value;
		},

		i(target, anchor) {
			if (current) return;

			this.m(target, anchor);
		},

		o: run,

		d(detach) {
			if (detach) {
				detachNode(input);
			}

			removeListener(input, "change", ctx.input_change_input_handler);
			removeListener(input, "input", ctx.input_change_input_handler);
		}
	};
}

function define($$self, $$props, $$make_dirty) {
	let { value } = $$props;

	function input_change_input_handler() {
		value = toNumber(this.value);
		$$make_dirty('value');
	}

	$$self.$$.get = () => ({ value, input_change_input_handler });

	$$self.$$.set = $$props => {
		if ('value' in $$props) value = $$props.value;
	};
}

class SvelteComponent extends SvelteComponent_1 {
	constructor(options) {
		super();
		init(this, options, define, create_fragment, safe_not_equal);
	}

	get value() {
		return this.$$.get().value;
	}

	set value(value) {
		this.$set({ value: value });
		flush();
	}
}

export default SvelteComponent;