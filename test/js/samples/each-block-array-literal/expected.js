/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	append,
	create_each_blocks,
	destroy_each_blocks,
	detach,
	element,
	empty,
	init,
	init_each_block,
	insert,
	mount_each_blocks,
	noop,
	safe_not_equal,
	set_data,
	text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.num = list[i];
	return child_ctx;
}

// (9:0) {#each [a, b, c, d, e] as num}
function create_each_block(ctx) {
	var span, t_value = ctx.num + "", t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},

		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},

		p(changed, ctx) {
			if ((changed.a || changed.b || changed.c || changed.d || changed.e) && t_value !== (t_value = ctx.num + "")) {
				set_data(t, t_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(span);
			}
		}
	};
}

function create_fragment(ctx) {
	var each_1_anchor;

	let each_value = [ctx.a, ctx.b, ctx.c, ctx.d, ctx.e];

	let each_blocks = init_each_block(
		ctx,
		get_each_context,
		ctx => [ctx.a, ctx.b, ctx.c, ctx.d, ctx.e],
		null,
		create_each_block,
		null
	);

	return {
		c() {
			create_each_blocks(each_blocks);

			each_1_anchor = empty();
		},

		m(target, anchor) {
			mount_each_blocks(each_blocks, target, anchor);

			insert(target, each_1_anchor, anchor);
		},

		p(changed, ctx) {
			if (changed.a || changed.b || changed.c || changed.d || changed.e) {
				each_value = [ctx.a, ctx.b, ctx.c, ctx.d, ctx.e];

				let i;
				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks.b[i]) {
						each_blocks.b[i].p(changed, child_ctx);
					} else {
						each_blocks.b[i] = create_each_block(child_ctx);
						each_blocks.b[i].c();
						each_blocks.b[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < 5; i += 1) {
					each_blocks.b[i].d(1);
				}
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			destroy_each_blocks(each_blocks, detaching);

			if (detaching) {
				detach(each_1_anchor);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { a, b, c, d, e } = $$props;

	$$self.$set = $$props => {
		if ('a' in $$props) $$invalidate('a', a = $$props.a);
		if ('b' in $$props) $$invalidate('b', b = $$props.b);
		if ('c' in $$props) $$invalidate('c', c = $$props.c);
		if ('d' in $$props) $$invalidate('d', d = $$props.d);
		if ('e' in $$props) $$invalidate('e', e = $$props.e);
	};

	return { a, b, c, d, e };
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["a", "b", "c", "d", "e"]);
	}
}

export default Component;