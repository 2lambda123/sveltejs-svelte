/* This file is generated by running `pnpm generate`
   in the sites/svelte.dev directory — do not edit it */
export const modules = /** @type {import('../generated/types').Modules} */ ([
  {
    "name": "svelte",
    "comment": "",
    "types": [
      {
        "name": "ComponentConstructorOptions",
        "comment": "",
        "snippet": "interface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {/*…*/}",
        "children": [
          {
            "name": "target",
            "snippet": "target: Element | ShadowRoot;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "anchor",
            "snippet": "anchor?: Element;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "props",
            "snippet": "props?: Props;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "context",
            "snippet": "context?: Map<any, any>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "hydrate",
            "snippet": "hydrate?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "intro",
            "snippet": "intro?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$$inline",
            "snippet": "$$inline?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "ComponentProps",
        "comment": "Convenience type to get the props the given component expects. Example:\n```html\n<script lang=\"ts\">\n\timport type { ComponentProps } from 'svelte';\n\timport Component from './Component.svelte';\n\n\tconst props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props\n</script>\n```",
        "snippet": "declare type ComponentProps<Component extends SvelteComponent> =\n\tComponent extends SvelteComponentTyped<infer Props> ? Props : never;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "ComponentType",
        "comment": "Convenience type to get the type of a Svelte component. Useful for example in combination with\ndynamic components using `<svelte:component>`.\n\nExample:\n```html\n<script lang=\"ts\">\n\timport type { ComponentType, SvelteComponentTyped } from 'svelte';\n\timport Component1 from './Component1.svelte';\n\timport Component2 from './Component2.svelte';\n\n\tconst component: ComponentType = someLogic() ? Component1 : Component2;\n\tconst componentOfCertainSubType: ComponentType<SvelteComponentTyped<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;\n</script>\n\n<svelte:component this={component} />\n<svelte:component this={componentOfCertainSubType} needsThisProp=\"hello\" />\n```",
        "snippet": "declare type ComponentType<\n\tComponent extends SvelteComponentTyped = SvelteComponentTyped\n> = new (\n\toptions: ComponentConstructorOptions<\n\t\tComponent extends SvelteComponentTyped<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Component;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "SvelteComponent",
        "comment": "",
        "snippet": "interface SvelteComponentDev {/*…*/}",
        "children": [
          {
            "name": "$set",
            "snippet": "$set(props?: Props): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on(event: string, callback: (event: any) => void): () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[accessor: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "SvelteComponent",
        "comment": "",
        "snippet": "interface SvelteComponent {/*…*/}",
        "children": [
          {
            "name": "$set",
            "snippet": "$set(props?: Props): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on(event: string, callback: (event: any) => void): () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[accessor: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "SvelteComponentTyped",
        "comment": "",
        "snippet": "interface SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> {/*…*/}",
        "children": [
          {
            "name": "$set",
            "snippet": "$set(props?: Partial<Props>): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on<K extends Extract<keyof Events, string>>(type: K, callback: (e: Events[K]) => void): () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[accessor: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "SvelteComponentTyped",
        "comment": "Base class to create strongly typed Svelte components.\nThis only exists for typing purposes and should be used in `.d.ts` files.\n\n### Example:\n\nYou have component library on npm called `component-library`, from which\nyou export a component called `MyComponent`. For Svelte+TypeScript users,\nyou want to provide typings. Therefore you create a `index.d.ts`:\n```ts\nimport { SvelteComponentTyped } from \"svelte\";\nexport class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n```\nTyping this makes it possible for IDEs like VS Code with the Svelte extension\nto provide intellisense and to use the component like this in a Svelte file\nwith TypeScript:\n```svelte\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\n```\n\n#### Why not make this part of `SvelteComponent(Dev)`?\nBecause\n```ts\nclass ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\nconst component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n```\nwill throw a type error, so we need to separate the more strictly typed class.",
        "snippet": "declare class SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent {/*…*/}",
        "children": [
          {
            "name": "$$prop_def",
            "snippet": "$$prop_def: Props;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag\">private</span> For type checking capabilities only.\nDoes not exist at runtime.\n### DO NOT USE!"
            ],
            "children": []
          },
          {
            "name": "$$events_def",
            "snippet": "$$events_def: Events;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag\">private</span> For type checking capabilities only.\nDoes not exist at runtime.\n### DO NOT USE!"
            ],
            "children": []
          },
          {
            "name": "$$slot_def",
            "snippet": "$$slot_def: Slots;",
            "comment": "",
            "bullets": [
              "- <span class=\"tag\">private</span> For type checking capabilities only.\nDoes not exist at runtime.\n### DO NOT USE!"
            ],
            "children": []
          },
          {
            "snippet": "constructor(options: ComponentConstructorOptions<Props>);",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": [
      {
        "name": "afterUpdate",
        "comment": "",
        "snippet": "declare function afterUpdate(fn: () => any): void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "beforeUpdate",
        "comment": "",
        "snippet": "declare function beforeUpdate(fn: () => any): void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "createEventDispatcher",
        "comment": "",
        "snippet": "declare function createEventDispatcher<EventMap extends {} = any>(): <\n\tEventKey extends Extract<keyof EventMap, string>\n>(\n\ttype: EventKey,\n\tdetail?: EventMap[EventKey],\n\toptions?: DispatchOptions\n) => boolean;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "getAllContexts",
        "comment": "",
        "snippet": "declare function getAllContexts<T extends Map<any, any> = Map<any, any>>(): T;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "getContext",
        "comment": "",
        "snippet": "declare function getContext<T>(key: any): T;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "hasContext",
        "comment": "",
        "snippet": "declare function hasContext(key: any): boolean;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "onDestroy",
        "comment": "",
        "snippet": "declare function onDestroy(fn: () => any): void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "onMount",
        "comment": "",
        "snippet": "declare function onMount(fn: () => any): void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "setContext",
        "comment": "",
        "snippet": "declare function setContext<T>(key: any, context: T): T;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "tick",
        "comment": "",
        "snippet": "declare function tick(): Promise<void>;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/action",
    "comment": "",
    "types": [
      {
        "name": "Action",
        "comment": "Actions are functions that are called when an element is created.\nYou can use this interface to type such actions.\nThe following example defines an action that only works on `<div>` elements\nand optionally accepts a parameter which it has a default value for:\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean }> = (node, param = { someProperty: true }) => {\n  // ...\n}\n```\nYou can return an object with methods `update` and `destroy` from the function.\nSee interface `ActionReturn` for more details.\n\nDocs: https://svelte.dev/docs#template-syntax-element-directives-use-action",
        "snippet": "interface Action<Element = HTMLElement, Parameter = any> {/*…*/}",
        "children": [
          {
            "snippet": "<Node extends Element>(node: Node, parameter?: Parameter): void | ActionReturn<Parameter>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "ActionReturn",
        "comment": "Actions can return an object containing the two properties defined in this interface. Both are optional.\n- update: An action can have a parameter. This method will be called whenever that parameter changes,\n  immediately after Svelte has applied updates to the markup.\n- destroy: Method that is called after the element is unmounted\n\nExample usage:\n```ts\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter> {\n  // ...\n  return {\n    update: (updatedParameter) => {...},\n    destroy: () => {...}\n  };\n}\n```\n\nDocs: https://svelte.dev/docs#template-syntax-element-directives-use-action",
        "snippet": "interface ActionReturn<Parameter = any> {/*…*/}",
        "children": [
          {
            "name": "update",
            "snippet": "update?: (parameter: Parameter) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "destroy",
            "snippet": "destroy?: () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": []
  },
  {
    "name": "svelte/animate",
    "comment": "",
    "types": [
      {
        "name": "AnimationConfig",
        "comment": "",
        "snippet": "interface AnimationConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "FlipParams",
        "comment": "",
        "snippet": "interface FlipParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": [
      {
        "name": "flip",
        "comment": "",
        "snippet": "declare function flip(\n\tnode: Element,\n\t{\n\t\tfrom,\n\t\tto\n\t}: {\n\t\tfrom: DOMRect;\n\t\tto: DOMRect;\n\t},\n\tparams?: FlipParams\n): AnimationConfig;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/compiler",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "VERSION",
        "comment": "",
        "snippet": "declare const VERSION = '4.0.0-next.0';",
        "children": [],
        "deprecated": null
      },
      {
        "name": "compile",
        "comment": "",
        "snippet": "declare function compile(\n\tsource: string,\n\toptions?: CompileOptions\n): {\n\tjs: any;\n\tcss: any;\n\tast: Ast;\n\twarnings: Warning[];\n\tvars: Var[];\n\tstats: {\n\t\ttimings: {\n\t\t\ttotal: number;\n\t\t};\n\t};\n};",
        "children": [],
        "deprecated": null
      },
      {
        "name": "parse",
        "comment": "",
        "snippet": "declare function parse(template: string, options?: ParserOptions): Ast;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "preprocess",
        "comment": "",
        "snippet": "declare function preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?: {\n\t\tfilename?: string;\n\t}\n): Promise<Processed>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "walk",
        "snippet": "declare function walk(\n\tast: Node,\n\t{\n\t\tenter,\n\t\tleave\n\t}: {\n\t\tenter?: SyncHandler;\n\t\tleave?: SyncHandler;\n\t}\n): Node | null;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/easing",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "backIn",
        "comment": "",
        "snippet": "declare function backIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "backInOut",
        "comment": "",
        "snippet": "declare function backInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "backOut",
        "comment": "",
        "snippet": "declare function backOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "bounceIn",
        "comment": "",
        "snippet": "declare function bounceIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "bounceInOut",
        "comment": "",
        "snippet": "declare function bounceInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "bounceOut",
        "comment": "",
        "snippet": "declare function bounceOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "circIn",
        "comment": "",
        "snippet": "declare function circIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "circInOut",
        "comment": "",
        "snippet": "declare function circInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "circOut",
        "comment": "",
        "snippet": "declare function circOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "cubicIn",
        "comment": "",
        "snippet": "declare function cubicIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "cubicInOut",
        "comment": "",
        "snippet": "declare function cubicInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "cubicOut",
        "comment": "",
        "snippet": "declare function cubicOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "elasticIn",
        "comment": "",
        "snippet": "declare function elasticIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "elasticInOut",
        "comment": "",
        "snippet": "declare function elasticInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "elasticOut",
        "comment": "",
        "snippet": "declare function elasticOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "expoIn",
        "comment": "",
        "snippet": "declare function expoIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "expoInOut",
        "comment": "",
        "snippet": "declare function expoInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "expoOut",
        "comment": "",
        "snippet": "declare function expoOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "linear",
        "comment": "",
        "snippet": "declare const linear: (x: any) => any;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quadIn",
        "comment": "",
        "snippet": "declare function quadIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quadInOut",
        "comment": "",
        "snippet": "declare function quadInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quadOut",
        "comment": "",
        "snippet": "declare function quadOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quartIn",
        "comment": "",
        "snippet": "declare function quartIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quartInOut",
        "comment": "",
        "snippet": "declare function quartInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quartOut",
        "comment": "",
        "snippet": "declare function quartOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quintIn",
        "comment": "",
        "snippet": "declare function quintIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quintInOut",
        "comment": "",
        "snippet": "declare function quintInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "quintOut",
        "comment": "",
        "snippet": "declare function quintOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "sineIn",
        "comment": "",
        "snippet": "declare function sineIn(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "sineInOut",
        "comment": "",
        "snippet": "declare function sineInOut(t: number): number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "sineOut",
        "comment": "",
        "snippet": "declare function sineOut(t: number): number;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/motion",
    "comment": "",
    "types": [
      {
        "name": "Spring",
        "comment": "",
        "snippet": "interface Spring<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update: (fn: Updater$1<T>, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "precision",
            "snippet": "precision: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "damping",
            "snippet": "damping: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "stiffness",
            "snippet": "stiffness: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "Tweened",
        "comment": "",
        "snippet": "interface Tweened<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(value: T, opts?: Options<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(updater: Updater<T>, opts?: Options<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": [
      {
        "name": "spring",
        "comment": "",
        "snippet": "declare function spring<T = any>(value?: T, opts?: SpringOpts): Spring<T>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "tweened",
        "comment": "",
        "snippet": "declare function tweened<T>(value?: T, defaults?: Options<T>): Tweened<T>;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/store",
    "comment": "",
    "types": [
      {
        "name": "Readable",
        "comment": "Readable interface for subscribing.",
        "snippet": "interface Readable<T> {/*…*/}",
        "children": [
          {
            "name": "subscribe",
            "snippet": "subscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;",
            "comment": "Subscribe on value changes.",
            "bullets": [
              "- `run` subscription callback",
              "- `invalidate` cleanup callback"
            ],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "StartStopNotifier",
        "comment": "Start and stop notification callbacks.",
        "snippet": "declare type StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "Subscriber",
        "comment": "Callback to inform of a value updates.",
        "snippet": "declare type Subscriber<T> = (value: T) => void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "Unsubscriber",
        "comment": "Unsubscribes from value updates.",
        "snippet": "declare type Unsubscriber = () => void;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "Updater",
        "comment": "Callback to update a value.",
        "snippet": "declare type Updater<T> = (value: T) => T;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "Writable",
        "comment": "Writable interface for both updating and subscribing.",
        "snippet": "interface Writable<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(this: void, value: T): void;",
            "comment": "Set value and inform subscribers.",
            "bullets": [
              "- `value` to set"
            ],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(this: void, updater: Updater<T>): void;",
            "comment": "Update value using callback and inform subscribers.",
            "bullets": [
              "- `updater` callback"
            ],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": [
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>, set: (value: T) => void) => Unsubscriber | void,\n\tinitial_value?: T\n): Readable<T>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T\n): Readable<T>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T\n): Readable<T>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "get",
        "comment": "",
        "snippet": "declare function get<T>(store: Readable<T>): T;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "readable",
        "comment": "Creates a `Readable` store that allows reading by subscription.",
        "snippet": "declare function readable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Readable<T>;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "writable",
        "comment": "Create a `Writable` store that allows both updating and reading by subscription.",
        "snippet": "declare function writable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Writable<T>;",
        "children": [],
        "deprecated": null
      }
    ]
  },
  {
    "name": "svelte/transition",
    "comment": "",
    "types": [
      {
        "name": "BlurParams",
        "comment": "",
        "snippet": "interface BlurParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "amount",
            "snippet": "amount?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "CrossfadeParams",
        "comment": "",
        "snippet": "interface CrossfadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "DrawParams",
        "comment": "",
        "snippet": "interface DrawParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "speed",
            "snippet": "speed?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "EasingFunction",
        "comment": "",
        "snippet": "declare type EasingFunction = (t: number) => number;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "FadeParams",
        "comment": "",
        "snippet": "interface FadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "FlyParams",
        "comment": "",
        "snippet": "interface FlyParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "x",
            "snippet": "x?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "y",
            "snippet": "y?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "ScaleParams",
        "comment": "",
        "snippet": "interface ScaleParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "start",
            "snippet": "start?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "SlideParams",
        "comment": "",
        "snippet": "interface SlideParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      },
      {
        "name": "TransitionConfig",
        "comment": "",
        "snippet": "interface TransitionConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ],
        "deprecated": null
      }
    ],
    "exports": [
      {
        "name": "blur",
        "comment": "",
        "snippet": "declare function blur(\n\tnode: Element,\n\t{ delay, duration, easing, amount, opacity }?: BlurParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "crossfade",
        "comment": "",
        "snippet": "declare function crossfade({\n\tfallback,\n\t...defaults\n}: CrossfadeParams & {\n\tfallback?: (\n\t\tnode: Element,\n\t\tparams: CrossfadeParams,\n\t\tintro: boolean\n\t) => TransitionConfig;\n}): [\n\t(\n\t\tnode: Element,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig,\n\t(\n\t\tnode: Element,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig\n];",
        "children": [],
        "deprecated": null
      },
      {
        "name": "draw",
        "comment": "",
        "snippet": "declare function draw(\n\tnode: SVGElement & {\n\t\tgetTotalLength(): number;\n\t},\n\t{ delay, speed, duration, easing }?: DrawParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "fade",
        "comment": "",
        "snippet": "declare function fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "fly",
        "comment": "",
        "snippet": "declare function fly(\n\tnode: Element,\n\t{ delay, duration, easing, x, y, opacity }?: FlyParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "scale",
        "comment": "",
        "snippet": "declare function scale(\n\tnode: Element,\n\t{ delay, duration, easing, start, opacity }?: ScaleParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      },
      {
        "name": "slide",
        "comment": "",
        "snippet": "declare function slide(\n\tnode: Element,\n\t{ delay, duration, easing }?: SlideParams\n): TransitionConfig;",
        "children": [],
        "deprecated": null
      }
    ]
  }
]);