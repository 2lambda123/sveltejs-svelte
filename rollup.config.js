import fs from 'fs';
import replace from '@rollup/plugin-replace';
import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import json from '@rollup/plugin-json';
import sucrase from '@rollup/plugin-sucrase';
import typescript from '@rollup/plugin-typescript';
import pkg from './package.json';

const esm = { format: 'esm' };
const cjs = { format: 'cjs' };

const is_publish = !!process.env.PUBLISH;

const ts_plugin = is_publish
	? typescript({ include: 'src/**', typescript: require('typescript') })
	: sucrase({ transforms: ['typescript'] });

const external = (id) => id.startsWith('svelte/');
const version = replace({ __VERSION__: pkg.version });

fs.writeFileSync(`./compiler.d.ts`, `export { compile, parse, preprocess, VERSION } from './types/compiler/index';`);

const output = (obj) =>
	Object.keys(obj).flatMap((name) =>
		[esm, cjs].map(({ format }) => ({
			format,
			file: `${name !== 'default' ? name + '/' : ''}${obj[name].file}.${format === 'esm' ? 'mjs' : 'js'}`,
			paths: (id) => external(id) && `${id.replace('svelte', obj[name].path)}`,
			plugins: (defaults.plugins || []).concat([replace({ __DEV__: name === 'dev' })]),
		}))
	);

function writeFileSync(...arr) {
	arr.filter(Boolean).forEach(({ dir, content }) => fs.writeFileSync(dir, content));
}
export default [
	/* runtime main */
	{
		input: `src/runtime/index.ts`,
		output: output({
			default: { file: 'index', path: '.' },
			dev: { file: 'index', path: '.' },
		}),
		external,
		plugins: [ts_plugin],
	},
	/* svelte/[library] */
	...fs
		.readdirSync('src/runtime')
		.filter((dir) => fs.statSync(`src/runtime/${dir}`).isDirectory())
		.map((dir) => ({
			input: `src/runtime/${dir}/index.ts`,
			output: output({
				[dir]: { file: 'index', path: '..' },
				dev: { file: dir, path: '.' },
			}),
			external,
			plugins: [
				version,
				ts_plugin,
				{
					writeBundle(bundle) {
						writeFileSync(
							dir === 'internal' &&
								bundle['index.mjs'] && {
									dir: `src/compiler/compile/internal_exports.ts`,
									content: `
									// This file is automatically generated
									export default new Set(${JSON.stringify(bundle['index.mjs'].exports)});`,
								},
							{
								dir: `${dir}/package.json`,
								content: `{
									"main": "./index",
									"module": "./index.mjs",
									"types": "./index.d.ts"
								}`,
							},
							{
								dir: `${dir}/index.d.ts`,
								content: `export * from '../types/runtime/${dir}/index';`,
							}
						);
					},
				},
			],
		})),
	/* compiler.js */
	{
		input: 'src/compiler/index.ts',
		plugins: [version, resolve(), commonjs({ include: ['node_modules/**'] }), json(), ts_plugin],
		output: {
			file: 'compiler.js',
			format: is_publish ? 'umd' : 'cjs',
			name: 'svelte',
			sourcemap: true,
		},
		external: is_publish ? [] : (id) => id === 'acorn' || id === 'magic-string' || id.startsWith('css-tree'),
	},
];
