/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_style,
	space
} from "svelte/internal";

function create_fragment(ctx) {
	let div0;
	let t;
	let div1;

	return {
		c() {
			div0 = element("div");
			t = space();
			div1 = element("div");
			set_style(div0, "color", /*color*/ ctx[0]);
			set_style(div0, "transform", "translate(" + /*x*/ ctx[1] + "px," + /*y*/ ctx[2] + "px)");
			set_style(div1, "color", /*color*/ ctx[0]);
			set_style(div1, "transform", "translate(" + /*x*/ ctx[1] + "px," + /*y*/ ctx[2] + "px)");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			insert(target, t, anchor);
			insert(target, div1, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*color*/ 1) {
				set_style(div0, "color", /*color*/ ctx[0]);
			}

			if (dirty & /*x, y*/ 6) {
				set_style(div0, "transform", "translate(" + /*x*/ ctx[1] + "px," + /*y*/ ctx[2] + "px)");
			}

			if (dirty & /*color*/ 1) {
				set_style(div1, "color", /*color*/ ctx[0]);
			}

			if (dirty & /*x, y*/ 6) {
				set_style(div1, "transform", "translate(" + /*x*/ ctx[1] + "px," + /*y*/ ctx[2] + "px)");
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div0);
			if (detaching) detach(t);
			if (detaching) detach(div1);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { color } = $$props;
	let { x } = $$props;
	let { y } = $$props;

	$$self.$$set = $$props => {
		if ("color" in $$props) $$invalidate(0, color = $$props.color);
		if ("x" in $$props) $$invalidate(1, x = $$props.x);
		if ("y" in $$props) $$invalidate(2, y = $$props.y);
	};

	return [color, x, y];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { color: 0, x: 1, y: 2 });
	}
}

export default Component;