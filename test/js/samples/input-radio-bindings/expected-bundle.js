function noop() {}

function assign(target) {
	var k,
		source,
		i = 1,
		len = arguments.length;
	for (; i < len; i++) {
		source = arguments[i];
		for (k in source) target[k] = source[k];
	}

	return target;
}

function insertNode(node, target, anchor) {
	target.insertBefore(node, anchor);
}

function detachNode(node) {
	node.parentNode.removeChild(node);
}

function createElement(name) {
	return document.createElement(name);
}

function createText(data) {
	return document.createTextNode(data);
}

function addListener(node, event, handler) {
	node.addEventListener(event, handler, false);
}

function removeListener(node, event, handler) {
	node.removeEventListener(event, handler, false);
}

function blankObject() {
	return Object.create(null);
}

function destroy(detach) {
	this.destroy = noop;
	this.fire('destroy');
	this.set = this.get = noop;

	if (detach !== false) this._fragment.u();
	this._fragment.d();
	this._fragment = this._state = null;
}

function _differs(a, b) {
	return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}

function dispatchObservers(component, group, changed, newState, oldState) {
	for (var key in group) {
		if (!changed[key]) continue;

		var newValue = newState[key];
		var oldValue = oldState[key];

		var callbacks = group[key];
		if (!callbacks) continue;

		for (var i = 0; i < callbacks.length; i += 1) {
			var callback = callbacks[i];
			if (callback.__calling) continue;

			callback.__calling = true;
			callback.call(component, newValue, oldValue);
			callback.__calling = false;
		}
	}
}

function fire(eventName, data) {
	var handlers =
		eventName in this._handlers && this._handlers[eventName].slice();
	if (!handlers) return;

	for (var i = 0; i < handlers.length; i += 1) {
		handlers[i].call(this, data);
	}
}

function get(key) {
	return key ? this._state[key] : this._state;
}

function init(component, options) {
	component._observers = { pre: blankObject(), post: blankObject() };
	component._handlers = blankObject();
	component._bind = options._bind;

	component.options = options;
	component.root = options.root || component;
	component.store = component.root.store || options.store;
}

function observe(key, callback, options) {
	var group = options && options.defer
		? this._observers.post
		: this._observers.pre;

	(group[key] || (group[key] = [])).push(callback);

	if (!options || options.init !== false) {
		callback.__calling = true;
		callback.call(this, this._state[key]);
		callback.__calling = false;
	}

	return {
		cancel: function() {
			var index = group[key].indexOf(callback);
			if (~index) group[key].splice(index, 1);
		}
	};
}

function on(eventName, handler) {
	if (eventName === 'teardown') return this.on('destroy', handler);

	var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
	handlers.push(handler);

	return {
		cancel: function() {
			var index = handlers.indexOf(handler);
			if (~index) handlers.splice(index, 1);
		}
	};
}

function set(newState) {
	this._set(assign({}, newState));
	if (this.root._lock) return;
	this.root._lock = true;
	callAll(this.root._beforecreate);
	callAll(this.root._oncreate);
	callAll(this.root._aftercreate);
	this.root._lock = false;
}

function _set(newState) {
	var oldState = this._state,
		changed = {},
		dirty = false;

	for (var key in newState) {
		if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
	}
	if (!dirty) return;

	this._state = assign({}, oldState, newState);
	this._recompute(changed, this._state);
	if (this._bind) this._bind(changed, this._state);

	if (this._fragment) {
		dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
		this._fragment.p(changed, this._state);
		dispatchObservers(this, this._observers.post, changed, this._state, oldState);
	}
}

function callAll(fns) {
	while (fns && fns.length) fns.shift()();
}

function _mount(target, anchor) {
	this._fragment.m(target, anchor);
}

function _unmount() {
	if (this._fragment) this._fragment.u();
}

var proto = {
	destroy: destroy,
	get: get,
	fire: fire,
	observe: observe,
	on: on,
	set: set,
	teardown: destroy,
	_recompute: noop,
	_set: _set,
	_mount: _mount,
	_unmount: _unmount,
	_differs: _differs
};

/* generated by Svelte vX.Y.Z */
function create_main_fragment(state, component) {
	var input, text, input_1, text_1, input_2, text_2, input_3;

	function input_change_handler() {
		if(component._last_radio_name1){
			component.set(JSON.parse('{"'+component._last_radio_name1+'": false}'));
		}
		component._last_radio_name1 = 'foo';
		component.set({ foo: true });
	}

	function input_1_change_handler() {
		if(component._last_radio_name1){
			component.set(JSON.parse('{"'+component._last_radio_name1+'": false}'));
		}
		component._last_radio_name1 = 'baz';
		component.set({ baz: true });
	}

	function input_2_change_handler() {
		if(component._last_radio_name2){
			component.set(JSON.parse('{"'+component._last_radio_name2+'": false}'));
		}
		component._last_radio_name2 = 'foo2';
		component.set({ foo2: true });
	}

	function input_3_change_handler() {
		if(component._last_radio_name2){
			component.set(JSON.parse('{"'+component._last_radio_name2+'": false}'));
		}
		component._last_radio_name2 = 'baz2';
		component.set({ baz2: true });
	}

	return {
		c: function create() {
			input = createElement("input");
			text = createText("\n");
			input_1 = createElement("input");
			text_1 = createText("\n\n");
			input_2 = createElement("input");
			text_2 = createText("\n");
			input_3 = createElement("input");
			this.h();
		},

		h: function hydrate() {
			addListener(input, "change", input_change_handler);
			input.type = "radio";
			input.name = "name1";
			addListener(input_1, "change", input_1_change_handler);
			input_1.type = "radio";
			input_1.name = "name1";
			addListener(input_2, "change", input_2_change_handler);
			input_2.type = "radio";
			input_2.name = "name2";
			addListener(input_3, "change", input_3_change_handler);
			input_3.type = "radio";
			input_3.name = "name2";
		},

		m: function mount(target, anchor) {
			insertNode(input, target, anchor);

			input.checked = state.foo;

			insertNode(text, target, anchor);
			insertNode(input_1, target, anchor);

			input_1.checked = state.baz;

			insertNode(text_1, target, anchor);
			insertNode(input_2, target, anchor);

			input_2.checked = state.foo2;

			insertNode(text_2, target, anchor);
			insertNode(input_3, target, anchor);

			input_3.checked = state.baz2;
		},

		p: function update(changed, state) {
			input.checked = state.foo;
			input_1.checked = state.baz;
			input_2.checked = state.foo2;
			input_3.checked = state.baz2;
		},

		u: function unmount() {
			detachNode(input);
			detachNode(text);
			detachNode(input_1);
			detachNode(text_1);
			detachNode(input_2);
			detachNode(text_2);
			detachNode(input_3);
		},

		d: function destroy$$1() {
			removeListener(input, "change", input_change_handler);
			removeListener(input_1, "change", input_1_change_handler);
			removeListener(input_2, "change", input_2_change_handler);
			removeListener(input_3, "change", input_3_change_handler);
		}
	};
}

function SvelteComponent(options) {
	init(this, options);
	this._state = assign({}, options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(SvelteComponent.prototype, proto);

export default SvelteComponent;
