/* generated by Svelte vX.Y.Z */
import {
	EachBlock,
	HtmlTag,
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = Object.create(ctx);
	child_ctx.comment = list[i];
	child_ctx.i = i;
	return child_ctx;
}

// (8:0) {#each comments as comment, i}
function create_each_block(ctx) {
	var div, strong, t0, t1, span, t2_value = ctx.comment.author + "", t2, t3, t4_value = ctx.elapsed(ctx.comment.time, ctx.time) + "", t4, t5, t6, html_tag, raw_value = ctx.comment.html + "";

	return {
		c() {
			div = element("div");
			strong = element("strong");
			t0 = text(ctx.i);
			t1 = space();
			span = element("span");
			t2 = text(t2_value);
			t3 = text(" wrote ");
			t4 = text(t4_value);
			t5 = text(" ago:");
			t6 = space();
			attr(span, "class", "meta");
			html_tag = new HtmlTag(raw_value, null);
			attr(div, "class", "comment");
		},

		m(target, anchor) {
			insert(target, div, anchor);
			append(div, strong);
			append(strong, t0);
			append(div, t1);
			append(div, span);
			append(span, t2);
			append(span, t3);
			append(span, t4);
			append(span, t5);
			append(div, t6);
			html_tag.m(div);
		},

		p(changed, ctx) {
			if ((changed.comments) && t2_value !== (t2_value = ctx.comment.author + "")) {
				set_data(t2, t2_value);
			}

			if ((changed.elapsed || changed.comments || changed.time) && t4_value !== (t4_value = ctx.elapsed(ctx.comment.time, ctx.time) + "")) {
				set_data(t4, t4_value);
			}

			if ((changed.comments) && raw_value !== (raw_value = ctx.comment.html + "")) {
				html_tag.p(raw_value);
			}
		},

		d(detaching) {
			if (detaching) {
				detach(div);
			}
		}
	};
}

function create_fragment(ctx) {
	var t0, p, t1;

	let each_blocks = new EachBlock(ctx, ctx => ctx.comments, create_each_block, get_each_context, null);

	return {
		c() {
			each_blocks.c();

			t0 = space();
			p = element("p");
			t1 = text(ctx.foo);
		},

		m(target, anchor) {
			each_blocks.m(target, anchor);

			insert(target, t0, anchor);
			insert(target, p, anchor);
			append(p, t1);
		},

		p(changed, ctx) {
			if (changed.comments || changed.elapsed || changed.time) {
				each_blocks.p(changed, ctx, t0.parentNode, t0);
			}

			if (changed.foo) {
				set_data(t1, ctx.foo);
			}
		},

		i: noop,
		o: noop,

		d(detaching) {
			each_blocks.d(detaching);

			if (detaching) {
				detach(t0);
				detach(p);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { comments, elapsed, time, foo } = $$props;

	$$self.$set = $$props => {
		if ('comments' in $$props) $$invalidate('comments', comments = $$props.comments);
		if ('elapsed' in $$props) $$invalidate('elapsed', elapsed = $$props.elapsed);
		if ('time' in $$props) $$invalidate('time', time = $$props.time);
		if ('foo' in $$props) $$invalidate('foo', foo = $$props.foo);
	};

	return { comments, elapsed, time, foo };
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, ["comments", "elapsed", "time", "foo"]);
	}
}

export default Component;