/* input.svelte generated by Svelte vx.x.x */
import {
	SvelteComponent,
	append,
	append_styles,
	attr,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text
} from "svelte/internal";

import "svelte/internal/disclose-version";

function add_css(target) {
	append_styles(target, "svelte-lf6xwg", "div.svelte-lf6xwg{background-color:var(--baz)}");
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let div;
	let t2_value = /*new_name_1*/ ctx[0].bar + "";
	let t2;
	let t3;
	let pre;

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "use-names";
			t1 = space();
			div = element("div");
			t2 = text(t2_value);
			t3 = space();
			pre = element("pre");
			pre.textContent = `${new_name_2}`;
			attr(div, "class", "svelte-lf6xwg");
			set_style(pre, "color", "var(--baz)");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			append(div, t2);
			insert(target, t3, anchor);
			insert(target, pre, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*new_name_1*/ 1 && t2_value !== (t2_value = /*new_name_1*/ ctx[0].bar + "")) set_data(t2, t2_value);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(div);
				detach(t3);
				detach(pre);
			}
		}
	};
}

let new_name_2 = 'value_2';

function instance($$self, $$props, $$invalidate) {
	let { new_name_1 = { bar: 5 } } = $$props;

	$$self.$$set = $$props => {
		if ('new_name_1' in $$props) $$invalidate(0, new_name_1 = $$props.new_name_1);
	};

	return [new_name_1];
}

class Input extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { new_name_1: 0 }, add_css);
	}
}

export default Input;
//# sourceMappingURL=_actual.js.map