/* generated by Svelte vX.Y.Z */
import {
	SvelteComponent,
	append,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

// (9:0) {#each [a, b, c, d, e] as num}
function create_each_block(ctx) {
	let span;
	let t_value = /*num*/ ctx[5] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*a, b, c, d, e*/ 31 && t_value !== (t_value = /*num*/ ctx[5] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let each_1_anchor;
	let each_value = [/*a*/ ctx[0], /*b*/ ctx[1], /*c*/ ctx[2], /*d*/ ctx[3], /*e*/ ctx[4]];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i++) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i++) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i++) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*a, b, c, d, e*/ 31) {
				each_value = [/*a*/ ctx[0], /*b*/ ctx[1], /*c*/ ctx[2], /*d*/ ctx[3], /*e*/ ctx[4]];
				let i = 0;
				let block;

				for (; i < each_value.length; i++) {
					block = each_blocks[i];
					const child_ctx = get_each_context(ctx, each_value, i);

					if (block) {
						block.p(child_ctx, dirty);
					} else {
						block = each_blocks[i] = create_each_block(child_ctx);
						block.c();
						block.m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i++) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { a } = $$props;
	let { b } = $$props;
	let { c } = $$props;
	let { d } = $$props;
	let { e } = $$props;

	$$self.$set = $$props => {
		if ("a" in $$props) $$invalidate(0, a = $$props.a);
		if ("b" in $$props) $$invalidate(1, b = $$props.b);
		if ("c" in $$props) $$invalidate(2, c = $$props.c);
		if ("d" in $$props) $$invalidate(3, d = $$props.d);
		if ("e" in $$props) $$invalidate(4, e = $$props.e);
		0;
	};

	return [a, b, c, d, e];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { a: 0, b: 1, c: 2, d: 3, e: 4 });
	}
}

export default Component;