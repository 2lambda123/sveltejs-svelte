/* generated by Svelte vX.Y.Z */
import { appendNode, assign, createComment, createElement, createText, destroyEach, detachNode, init, insertNode, noop, proto } from "svelte/shared.js";

function create_main_fragment(component, state) {
	var each_anchor;

	var things = state.things;

	var each_blocks = [];

	for (var i = 0; i < things.length; i += 1) {
		each_blocks[i] = create_each_block(component, assign({}, state, {
			thing: things[i]
		}));
	}

	return {
		c: function create() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_anchor = createComment();
		},

		m: function mount(target, anchor) {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insertNode(each_anchor, target, anchor);
		},

		p: function update(changed, state) {
			var things = state.things;

			if (changed.things) {
				for (var i = 0; i < things.length; i += 1) {
					var each_context = assign({}, state, {
						thing: things[i]
					});

					if (each_blocks[i]) {
						each_blocks[i].p(changed, each_context);
					} else {
						each_blocks[i] = create_each_block(component, each_context);
						each_blocks[i].c();
						each_blocks[i].m(each_anchor.parentNode, each_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
					each_blocks[i].d();
				}
				each_blocks.length = things.length;
			}
		},

		u: function unmount() {
			for (var i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].u();
			}

			detachNode(each_anchor);
		},

		d: function destroy() {
			destroyEach(each_blocks);
		}
	};
}

// (1:0) {{#each things as thing}}
function create_each_block(component, state) {
	var thing = state.thing;
	var p, text_value = thing, text, text_1, if_block_anchor;

	var if_block = (true) && create_if_block(component, state);

	return {
		c: function create() {
			p = createElement("p");
			text = createText(text_value);
			text_1 = createText("\n\n\t");
			if (if_block) if_block.c();
			if_block_anchor = createComment();
		},

		m: function mount(target, anchor) {
			insertNode(p, target, anchor);
			appendNode(text, p);
			insertNode(text_1, target, anchor);
			if (if_block) if_block.m(target, anchor);
			insertNode(if_block_anchor, target, anchor);
		},

		p: function update(changed, state) {
			thing = state.thing;
			if ((changed.things) && text_value !== (text_value = thing)) {
				text.data = text_value;
			}

			if (true) {
				if (!if_block) {
					if_block = create_if_block(component, state);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.u();
				if_block.d();
				if_block = null;
			}
		},

		u: function unmount() {
			detachNode(p);
			detachNode(text_1);
			if (if_block) if_block.u();
			detachNode(if_block_anchor);
		},

		d: function destroy() {
			if (if_block) if_block.d();
		}
	};
}

// (4:1) {{#if true}}
function create_if_block(component, state) {
	var p;

	return {
		c: function create() {
			p = createElement("p");
			p.textContent = "thing is unused";
		},

		m: function mount(target, anchor) {
			insertNode(p, target, anchor);
		},

		p: noop,

		u: function unmount() {
			detachNode(p);
		},

		d: noop
	};
}

function SvelteComponent(options) {
	init(this, options);
	this._state = assign({}, options.data);

	this._fragment = create_main_fragment(this, this._state);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(SvelteComponent.prototype, proto);
export default SvelteComponent;