/* generated by Svelte vX.Y.Z */
import { addListener, assign, createElement, createText, detachNode, init, insertNode, proto, removeListener } from "svelte/shared.js";

function create_main_fragment(state, component) {
	var input, text, input_1, text_1, input_2, text_2, input_3;

	function input_change_handler() {
		if(component._last_radio_name1){
			component.set(JSON.parse('{"'+component._last_radio_name1+'": false}'));
		}
		component._last_radio_name1 = 'foo';
		component.set({ foo: true });
	}

	function input_1_change_handler() {
		if(component._last_radio_name1){
			component.set(JSON.parse('{"'+component._last_radio_name1+'": false}'));
		}
		component._last_radio_name1 = 'baz';
		component.set({ baz: true });
	}

	function input_2_change_handler() {
		if(component._last_radio_name2){
			component.set(JSON.parse('{"'+component._last_radio_name2+'": false}'));
		}
		component._last_radio_name2 = 'foo2';
		component.set({ foo2: true });
	}

	function input_3_change_handler() {
		if(component._last_radio_name2){
			component.set(JSON.parse('{"'+component._last_radio_name2+'": false}'));
		}
		component._last_radio_name2 = 'baz2';
		component.set({ baz2: true });
	}

	return {
		c: function create() {
			input = createElement("input");
			text = createText("\n");
			input_1 = createElement("input");
			text_1 = createText("\n\n");
			input_2 = createElement("input");
			text_2 = createText("\n");
			input_3 = createElement("input");
			this.h();
		},

		h: function hydrate() {
			addListener(input, "change", input_change_handler);
			input.type = "radio";
			input.name = "name1";
			addListener(input_1, "change", input_1_change_handler);
			input_1.type = "radio";
			input_1.name = "name1";
			addListener(input_2, "change", input_2_change_handler);
			input_2.type = "radio";
			input_2.name = "name2";
			addListener(input_3, "change", input_3_change_handler);
			input_3.type = "radio";
			input_3.name = "name2";
		},

		m: function mount(target, anchor) {
			insertNode(input, target, anchor);

			input.checked = state.foo;

			insertNode(text, target, anchor);
			insertNode(input_1, target, anchor);
      
			input_1.checked = state.baz;
      
			insertNode(text_1, target, anchor);
			insertNode(input_2, target, anchor);

			input_2.checked = state.foo2;

			insertNode(text_2, target, anchor);
			insertNode(input_3, target, anchor);

			input_3.checked = state.baz2;
		},

		p: function update(changed, state) {
			input.checked = state.foo;
			input_1.checked = state.baz;
			input_2.checked = state.foo2;
			input_3.checked = state.baz2;
		},

		u: function unmount() {
			detachNode(input);
			detachNode(text);
			detachNode(input_1);
			detachNode(text_1);
			detachNode(input_2);
			detachNode(text_2);
			detachNode(input_3);
		},

		d: function destroy() {
			removeListener(input, "change", input_change_handler);
			removeListener(input_1, "change", input_1_change_handler);
			removeListener(input_2, "change", input_2_change_handler);
			removeListener(input_3, "change", input_3_change_handler);
		}
	};
}

function SvelteComponent(options) {
	init(this, options);
	this._state = assign({}, options.data);

	this._fragment = create_main_fragment(this._state, this);

	if (options.target) {
		this._fragment.c();
		this._fragment.m(options.target, options.anchor || null);
	}
}

assign(SvelteComponent.prototype, proto);
export default SvelteComponent;
