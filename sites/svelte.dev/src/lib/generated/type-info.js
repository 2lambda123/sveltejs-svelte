/* This file is generated by running `node scripts/extract-types.js`
   in the packages/kit directory — do not edit it */
export const modules = [
  {
    "name": "svelte",
    "comment": "",
    "types": [
      {
        "name": "ComponentConstructorOptions",
        "comment": "",
        "snippet": "interface ComponentConstructorOptions<\n\tProps extends Record<string, any> = Record<string, any>\n> {/*…*/}",
        "children": [
          {
            "name": "target",
            "snippet": "target: Element | Document | ShadowRoot;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "anchor",
            "snippet": "anchor?: Element;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "props",
            "snippet": "props?: Props;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "context",
            "snippet": "context?: Map<any, any>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "hydrate",
            "snippet": "hydrate?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "intro",
            "snippet": "intro?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$$inline",
            "snippet": "$$inline?: boolean;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "ComponentEvents",
        "comment": "Convenience type to get the events the given component expects. Example:\n```html\n<script lang=\"ts\">\n   import type { ComponentEvents } from 'svelte';\n   import Component from './Component.svelte';\n\n   function handleCloseEvent(event: ComponentEvents<Component>['close']) {\n      console.log(event.detail);\n   }\n</script>\n\n<Component on:close={handleCloseEvent} />\n```",
        "snippet": "declare type ComponentEvents<Component extends SvelteComponent> =\n\tComponent extends SvelteComponentTyped<any, infer Events> ? Events : never;",
        "children": []
      },
      {
        "name": "ComponentProps",
        "comment": "Convenience type to get the props the given component expects. Example:\n```html\n<script lang=\"ts\">\n\timport type { ComponentProps } from 'svelte';\n\timport Component from './Component.svelte';\n\n\tconst props: ComponentProps<Component> = { foo: 'bar' }; // Errors if these aren't the correct props\n</script>\n```",
        "snippet": "declare type ComponentProps<Component extends SvelteComponent> =\n\tComponent extends SvelteComponentTyped<infer Props> ? Props : never;",
        "children": []
      },
      {
        "name": "ComponentType",
        "comment": "Convenience type to get the type of a Svelte component. Useful for example in combination with\ndynamic components using `<svelte:component>`.\n\nExample:\n```html\n<script lang=\"ts\">\n\timport type { ComponentType, SvelteComponentTyped } from 'svelte';\n\timport Component1 from './Component1.svelte';\n\timport Component2 from './Component2.svelte';\n\n\tconst component: ComponentType = someLogic() ? Component1 : Component2;\n\tconst componentOfCertainSubType: ComponentType<SvelteComponentTyped<{ needsThisProp: string }>> = someLogic() ? Component1 : Component2;\n</script>\n\n<svelte:component this={component} />\n<svelte:component this={componentOfCertainSubType} needsThisProp=\"hello\" />\n```",
        "snippet": "declare type ComponentType<\n\tComponent extends SvelteComponentTyped = SvelteComponentTyped\n> = new (\n\toptions: ComponentConstructorOptions<\n\t\tComponent extends SvelteComponentTyped<infer Props>\n\t\t\t? Props\n\t\t\t: Record<string, any>\n\t>\n) => Component;",
        "children": []
      },
      {
        "name": "SvelteComponent",
        "comment": "Base class for Svelte components. Used when dev=false.",
        "snippet": "declare class SvelteComponent {\n\t$$: T$$;\n\t$$set?: ($$props: any) => void;\n\t$destroy(): void;\n\t$on(type: any, callback: any): typeof noop;\n\t$set($$props: any): void;\n}",
        "children": []
      },
      {
        "name": "SvelteComponent",
        "comment": "",
        "snippet": "interface SvelteComponent {/*…*/}",
        "children": [
          {
            "name": "$set",
            "snippet": "$set(props?: Props): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on(event: string, callback: ((event: any) => void) | null | undefined): () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[accessor: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "SvelteComponentTyped",
        "comment": "",
        "snippet": "interface SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> {/*…*/}",
        "children": [
          {
            "name": "$set",
            "snippet": "$set(props?: Partial<Props>): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$on",
            "snippet": "$on<K extends Extract<keyof Events, string>>(type: K, callback: ((e: Events[K]) => void) | null | undefined): () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$destroy",
            "snippet": "$destroy(): void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "snippet": "[accessor: string]: any;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "SvelteComponentTyped",
        "comment": "Base class to create strongly typed Svelte components.\nThis only exists for typing purposes and should be used in `.d.ts` files.\n\n### Example:\n\nYou have component library on npm called `component-library`, from which\nyou export a component called `MyComponent`. For Svelte+TypeScript users,\nyou want to provide typings. Therefore you create a `index.d.ts`:\n```ts\nimport { SvelteComponentTyped } from \"svelte\";\nexport class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n```\nTyping this makes it possible for IDEs like VS Code with the Svelte extension\nto provide intellisense and to use the component like this in a Svelte file\nwith TypeScript:\n```svelte\n<script lang=\"ts\">\n\timport { MyComponent } from \"component-library\";\n</script>\n<MyComponent foo={'bar'} />\n```\n\n#### Why not make this part of `SvelteComponent(Dev)`?\nBecause\n```ts\nclass ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\nconst component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n```\nwill throw a type error, so we need to separate the more strictly typed class.",
        "snippet": "declare class SvelteComponentTyped<\n\tProps extends Record<string, any> = any,\n\tEvents extends Record<string, any> = any,\n\tSlots extends Record<string, any> = any\n> extends SvelteComponent {\n\t/**\n\t * @private\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t */\n\t$$prop_def: Props;\n\t/**\n\t * @private\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t */\n\t$$events_def: Events;\n\t/**\n\t * @private\n\t * For type checking capabilities only.\n\t * Does not exist at runtime.\n\t * ### DO NOT USE!\n\t */\n\t$$slot_def: Slots;\n\tconstructor(options: ComponentConstructorOptions<Props>);\n}",
        "children": []
      }
    ],
    "exports": [
      {
        "name": "afterUpdate",
        "comment": "Schedules a callback to run immediately after the component has been updated.\n\nThe first time the callback runs will be after the initial `onMount`",
        "snippet": "declare function afterUpdate(fn: () => any): void;",
        "children": []
      },
      {
        "name": "beforeUpdate",
        "comment": "Schedules a callback to run immediately before the component is updated after any state change.\n\nThe first time the callback runs will be before the initial `onMount`\n\nhttps://svelte.dev/docs#run-time-svelte-beforeupdate",
        "snippet": "declare function beforeUpdate(fn: () => any): void;",
        "children": []
      },
      {
        "name": "createEventDispatcher",
        "comment": "Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\nEvent dispatchers are functions that can take two arguments: `name` and `detail`.\n\nComponent events created with `createEventDispatcher` create a\n[CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\nThese events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\nThe `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\nproperty and can contain any type of data.\n\nhttps://svelte.dev/docs#run-time-svelte-createeventdispatcher",
        "snippet": "declare function createEventDispatcher<EventMap extends {} = any>(): <\n\tEventKey extends Extract<keyof EventMap, string>\n>(\n\ttype: EventKey,\n\tdetail?: EventMap[EventKey],\n\toptions?: DispatchOptions\n) => boolean;",
        "children": []
      },
      {
        "name": "getAllContexts",
        "comment": "Retrieves the whole context map that belongs to the closest parent component.\nMust be called during component initialisation. Useful, for example, if you\nprogrammatically create a component and want to pass the existing context to it.\n\nhttps://svelte.dev/docs#run-time-svelte-getallcontexts",
        "snippet": "declare function getAllContexts<T extends Map<any, any> = Map<any, any>>(): T;",
        "children": []
      },
      {
        "name": "getContext",
        "comment": "Retrieves the context that belongs to the closest parent component with the specified `key`.\nMust be called during component initialisation.\n\nhttps://svelte.dev/docs#run-time-svelte-getcontext",
        "snippet": "declare function getContext<T>(key: any): T;",
        "children": []
      },
      {
        "name": "hasContext",
        "comment": "Checks whether a given `key` has been set in the context of a parent component.\nMust be called during component initialisation.\n\nhttps://svelte.dev/docs#run-time-svelte-hascontext",
        "snippet": "declare function hasContext(key: any): boolean;",
        "children": []
      },
      {
        "name": "onDestroy",
        "comment": "Schedules a callback to run immediately before the component is unmounted.\n\nOut of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\nonly one that runs inside a server-side component.\n\nhttps://svelte.dev/docs#run-time-svelte-ondestroy",
        "snippet": "declare function onDestroy(fn: () => any): void;",
        "children": []
      },
      {
        "name": "onMount",
        "comment": "The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\nIt must be called during the component's initialisation (but doesn't need to live *inside* the component;\nit can be called from an external module).\n\n`onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n\nhttps://svelte.dev/docs#run-time-svelte-onmount",
        "snippet": "declare function onMount(fn: () => any): void;",
        "children": []
      },
      {
        "name": "setContext",
        "comment": "Associates an arbitrary `context` object with the current component and the specified `key`\nand returns that object. The context is then available to children of the component\n(including slotted content) with `getContext`.\n\nLike lifecycle functions, this must be called during component initialisation.\n\nhttps://svelte.dev/docs#run-time-svelte-setcontext",
        "snippet": "declare function setContext<T>(key: any, context: T): T;",
        "children": []
      },
      {
        "name": "tick",
        "comment": "",
        "snippet": "declare function tick(): Promise<void>;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/action",
    "comment": "",
    "types": [
      {
        "name": "Action",
        "comment": "Actions are functions that are called when an element is created.\nYou can use this interface to type such actions.\nThe following example defines an action that only works on `<div>` elements\nand optionally accepts a parameter which it has a default value for:\n```ts\nexport const myAction: Action<HTMLDivElement, { someProperty: boolean }> = (node, param = { someProperty: true }) => {\n  // ...\n}\n```\nYou can return an object with methods `update` and `destroy` from the function and type which additional attributes and events it has.\nSee interface `ActionReturn` for more details.\n\nDocs: https://svelte.dev/docs#template-syntax-element-directives-use-action",
        "snippet": "interface Action<\n\tElement = HTMLElement,\n\tParameter = any,\n\tAttributes extends Record<string, any> = Record<never, any>\n> {/*…*/}",
        "children": [
          {
            "snippet": "<Node extends Element>(node: Node, parameter?: Parameter): void | ActionReturn<Parameter, Attributes>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "ActionReturn",
        "comment": "Actions can return an object containing the two properties defined in this interface. Both are optional.\n- update: An action can have a parameter. This method will be called whenever that parameter changes,\n  immediately after Svelte has applied updates to the markup.\n- destroy: Method that is called after the element is unmounted\n\nAdditionally, you can specify which additional attributes and events the action enables on the applied element.\nThis applies to TypeScript typings only and has no effect at runtime.\n\nExample usage:\n```ts\ninterface Attributes {\n\tnewprop?: string;\n'on:event': (e: CustomEvent<boolean>) => void;\n}\n\nexport function myAction(node: HTMLElement, parameter: Parameter): ActionReturn<Parameter, Attributes> {\n  // ...\n  return {\n    update: (updatedParameter) => {...},\n    destroy: () => {...}\n  };\n}\n```\n\nDocs: https://svelte.dev/docs#template-syntax-element-directives-use-action",
        "snippet": "interface ActionReturn<\n\tParameter = any,\n\tAttributes extends Record<string, any> = Record<never, any>\n> {/*…*/}",
        "children": [
          {
            "name": "update",
            "snippet": "update?: (parameter: Parameter) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "destroy",
            "snippet": "destroy?: () => void;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "$$_attributes",
            "snippet": "$$_attributes?: Attributes;",
            "comment": "### DO NOT USE THIS\nThis exists solely for type-checking and has no effect at runtime.\nSet this through the `Attributes` generic instead.",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": []
  },
  {
    "name": "svelte/animate",
    "comment": "",
    "types": [
      {
        "name": "AnimationConfig",
        "comment": "",
        "snippet": "interface AnimationConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "FlipParams",
        "comment": "",
        "snippet": "interface FlipParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: (t: number) => number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "flip",
        "comment": "",
        "snippet": "declare function flip(\n\tnode: Element,\n\t{\n\t\tfrom,\n\t\tto\n\t}: {\n\t\tfrom: DOMRect;\n\t\tto: DOMRect;\n\t},\n\tparams?: FlipParams\n): AnimationConfig;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/compiler",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "VERSION",
        "comment": "",
        "snippet": "declare const VERSION = '3.58.0';",
        "children": []
      },
      {
        "name": "compile",
        "comment": "",
        "snippet": "declare function compile(\n\tsource: string,\n\toptions?: CompileOptions\n): {\n\tjs: any;\n\tcss: any;\n\tast: Ast;\n\twarnings: Warning[];\n\tvars: Var[];\n\tstats: {\n\t\ttimings: {\n\t\t\ttotal: number;\n\t\t};\n\t};\n};",
        "children": []
      },
      {
        "name": "parse",
        "comment": "",
        "snippet": "declare function parse(template: string, options?: ParserOptions): Ast;",
        "children": []
      },
      {
        "name": "preprocess",
        "comment": "",
        "snippet": "declare function preprocess(\n\tsource: string,\n\tpreprocessor: PreprocessorGroup | PreprocessorGroup[],\n\toptions?: {\n\t\tfilename?: string;\n\t}\n): Promise<Processed>;",
        "children": []
      },
      {
        "name": "walk",
        "snippet": "declare function walk(\n\tast: Node,\n\t{\n\t\tenter,\n\t\tleave\n\t}: {\n\t\tenter?: SyncHandler;\n\t\tleave?: SyncHandler;\n\t}\n): Node | null;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/easing",
    "comment": "",
    "types": [],
    "exports": [
      {
        "name": "backIn",
        "comment": "",
        "snippet": "declare function backIn(t: number): number;",
        "children": []
      },
      {
        "name": "backInOut",
        "comment": "",
        "snippet": "declare function backInOut(t: number): number;",
        "children": []
      },
      {
        "name": "backOut",
        "comment": "",
        "snippet": "declare function backOut(t: number): number;",
        "children": []
      },
      {
        "name": "bounceIn",
        "comment": "",
        "snippet": "declare function bounceIn(t: number): number;",
        "children": []
      },
      {
        "name": "bounceInOut",
        "comment": "",
        "snippet": "declare function bounceInOut(t: number): number;",
        "children": []
      },
      {
        "name": "bounceOut",
        "comment": "",
        "snippet": "declare function bounceOut(t: number): number;",
        "children": []
      },
      {
        "name": "circIn",
        "comment": "",
        "snippet": "declare function circIn(t: number): number;",
        "children": []
      },
      {
        "name": "circInOut",
        "comment": "",
        "snippet": "declare function circInOut(t: number): number;",
        "children": []
      },
      {
        "name": "circOut",
        "comment": "",
        "snippet": "declare function circOut(t: number): number;",
        "children": []
      },
      {
        "name": "cubicIn",
        "comment": "",
        "snippet": "declare function cubicIn(t: number): number;",
        "children": []
      },
      {
        "name": "cubicInOut",
        "comment": "",
        "snippet": "declare function cubicInOut(t: number): number;",
        "children": []
      },
      {
        "name": "cubicOut",
        "comment": "",
        "snippet": "declare function cubicOut(t: number): number;",
        "children": []
      },
      {
        "name": "elasticIn",
        "comment": "",
        "snippet": "declare function elasticIn(t: number): number;",
        "children": []
      },
      {
        "name": "elasticInOut",
        "comment": "",
        "snippet": "declare function elasticInOut(t: number): number;",
        "children": []
      },
      {
        "name": "elasticOut",
        "comment": "",
        "snippet": "declare function elasticOut(t: number): number;",
        "children": []
      },
      {
        "name": "expoIn",
        "comment": "",
        "snippet": "declare function expoIn(t: number): number;",
        "children": []
      },
      {
        "name": "expoInOut",
        "comment": "",
        "snippet": "declare function expoInOut(t: number): number;",
        "children": []
      },
      {
        "name": "expoOut",
        "comment": "",
        "snippet": "declare function expoOut(t: number): number;",
        "children": []
      },
      {
        "name": "linear",
        "comment": "",
        "snippet": "declare const linear: (x: any) => any;",
        "children": []
      },
      {
        "name": "quadIn",
        "comment": "",
        "snippet": "declare function quadIn(t: number): number;",
        "children": []
      },
      {
        "name": "quadInOut",
        "comment": "",
        "snippet": "declare function quadInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quadOut",
        "comment": "",
        "snippet": "declare function quadOut(t: number): number;",
        "children": []
      },
      {
        "name": "quartIn",
        "comment": "",
        "snippet": "declare function quartIn(t: number): number;",
        "children": []
      },
      {
        "name": "quartInOut",
        "comment": "",
        "snippet": "declare function quartInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quartOut",
        "comment": "",
        "snippet": "declare function quartOut(t: number): number;",
        "children": []
      },
      {
        "name": "quintIn",
        "comment": "",
        "snippet": "declare function quintIn(t: number): number;",
        "children": []
      },
      {
        "name": "quintInOut",
        "comment": "",
        "snippet": "declare function quintInOut(t: number): number;",
        "children": []
      },
      {
        "name": "quintOut",
        "comment": "",
        "snippet": "declare function quintOut(t: number): number;",
        "children": []
      },
      {
        "name": "sineIn",
        "comment": "",
        "snippet": "declare function sineIn(t: number): number;",
        "children": []
      },
      {
        "name": "sineInOut",
        "comment": "",
        "snippet": "declare function sineInOut(t: number): number;",
        "children": []
      },
      {
        "name": "sineOut",
        "comment": "",
        "snippet": "declare function sineOut(t: number): number;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/motion",
    "comment": "",
    "types": [
      {
        "name": "Spring",
        "comment": "",
        "snippet": "interface Spring<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set: (new_value: T, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update: (fn: Updater$1<T>, opts?: SpringUpdateOpts) => Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "precision",
            "snippet": "precision: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "damping",
            "snippet": "damping: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "stiffness",
            "snippet": "stiffness: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "Tweened",
        "comment": "",
        "snippet": "interface Tweened<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(value: T, opts?: Options<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(updater: Updater<T>, opts?: Options<T>): Promise<void>;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "spring",
        "comment": "",
        "snippet": "declare function spring<T = any>(value?: T, opts?: SpringOpts): Spring<T>;",
        "children": []
      },
      {
        "name": "tweened",
        "comment": "",
        "snippet": "declare function tweened<T>(value?: T, defaults?: Options<T>): Tweened<T>;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/store",
    "comment": "",
    "types": [
      {
        "name": "Readable",
        "comment": "Readable interface for subscribing.",
        "snippet": "interface Readable<T> {/*…*/}",
        "children": [
          {
            "name": "subscribe",
            "snippet": "subscribe(this: void, run: Subscriber<T>, invalidate?: Invalidator<T>): Unsubscriber;",
            "comment": "Subscribe on value changes.",
            "bullets": [
              "- `run` subscription callback",
              "- `invalidate` cleanup callback"
            ],
            "children": []
          }
        ]
      },
      {
        "name": "StartStopNotifier",
        "comment": "Start and stop notification callbacks.",
        "snippet": "declare type StartStopNotifier<T> = (set: Subscriber<T>) => Unsubscriber | void;",
        "children": []
      },
      {
        "name": "Subscriber",
        "comment": "Callback to inform of a value updates.",
        "snippet": "declare type Subscriber<T> = (value: T) => void;",
        "children": []
      },
      {
        "name": "Unsubscriber",
        "comment": "Unsubscribes from value updates.",
        "snippet": "declare type Unsubscriber = () => void;",
        "children": []
      },
      {
        "name": "Updater",
        "comment": "Callback to update a value.",
        "snippet": "declare type Updater<T> = (value: T) => T;",
        "children": []
      },
      {
        "name": "Writable",
        "comment": "Writable interface for both updating and subscribing.",
        "snippet": "interface Writable<T> extends Readable<T> {/*…*/}",
        "children": [
          {
            "name": "set",
            "snippet": "set(this: void, value: T): void;",
            "comment": "Set value and inform subscribers.",
            "bullets": [
              "- `value` to set"
            ],
            "children": []
          },
          {
            "name": "update",
            "snippet": "update(this: void, updater: Updater<T>): void;",
            "comment": "Update value using callback and inform subscribers.",
            "bullets": [
              "- `updater` callback"
            ],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>, set: (value: T) => void) => Unsubscriber | void,\n\tinitial_value?: T\n): Readable<T>;",
        "children": []
      },
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T,\n\tinitial_value?: T\n): Readable<T>;",
        "children": []
      },
      {
        "name": "derived",
        "comment": "Derived value store by synchronizing one or more readable stores and\napplying an aggregation function over its input values.",
        "snippet": "declare function derived<S extends Stores, T>(\n\tstores: S,\n\tfn: (values: StoresValues<S>) => T\n): Readable<T>;",
        "children": []
      },
      {
        "name": "get",
        "comment": "",
        "snippet": "declare function get<T>(store: Readable<T>): T;",
        "children": []
      },
      {
        "name": "readable",
        "comment": "Creates a `Readable` store that allows reading by subscription.",
        "snippet": "declare function readable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Readable<T>;",
        "children": []
      },
      {
        "name": "readonly",
        "comment": "Takes a store and returns a new one derived from the old one that is readable.",
        "snippet": "declare function readonly<T>(store: Readable<T>): Readable<T>;",
        "children": []
      },
      {
        "name": "writable",
        "comment": "Create a `Writable` store that allows both updating and reading by subscription.",
        "snippet": "declare function writable<T>(\n\tvalue?: T,\n\tstart?: StartStopNotifier<T>\n): Writable<T>;",
        "children": []
      }
    ]
  },
  {
    "name": "svelte/transition",
    "comment": "",
    "types": [
      {
        "name": "BlurParams",
        "comment": "",
        "snippet": "interface BlurParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "amount",
            "snippet": "amount?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "CrossfadeParams",
        "comment": "",
        "snippet": "interface CrossfadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "DrawParams",
        "comment": "",
        "snippet": "interface DrawParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "speed",
            "snippet": "speed?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number | ((len: number) => number);",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "EasingFunction",
        "comment": "",
        "snippet": "declare type EasingFunction = (t: number) => number;",
        "children": []
      },
      {
        "name": "FadeParams",
        "comment": "",
        "snippet": "interface FadeParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "FlyParams",
        "comment": "",
        "snippet": "interface FlyParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "x",
            "snippet": "x?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "y",
            "snippet": "y?: number | string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "ScaleParams",
        "comment": "",
        "snippet": "interface ScaleParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "start",
            "snippet": "start?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "opacity",
            "snippet": "opacity?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "SlideParams",
        "comment": "",
        "snippet": "interface SlideParams {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "axis",
            "snippet": "axis?: 'x' | 'y';",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      },
      {
        "name": "TransitionConfig",
        "comment": "",
        "snippet": "interface TransitionConfig {/*…*/}",
        "children": [
          {
            "name": "delay",
            "snippet": "delay?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "duration",
            "snippet": "duration?: number;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "easing",
            "snippet": "easing?: EasingFunction;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "css",
            "snippet": "css?: (t: number, u: number) => string;",
            "comment": "",
            "bullets": [],
            "children": []
          },
          {
            "name": "tick",
            "snippet": "tick?: (t: number, u: number) => void;",
            "comment": "",
            "bullets": [],
            "children": []
          }
        ]
      }
    ],
    "exports": [
      {
        "name": "blur",
        "comment": "",
        "snippet": "declare function blur(\n\tnode: Element,\n\t{ delay, duration, easing, amount, opacity }?: BlurParams\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "crossfade",
        "comment": "",
        "snippet": "declare function crossfade({\n\tfallback,\n\t...defaults\n}: CrossfadeParams & {\n\tfallback?: (\n\t\tnode: Element,\n\t\tparams: CrossfadeParams,\n\t\tintro: boolean\n\t) => TransitionConfig;\n}): [\n\t(\n\t\tnode: Element,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig,\n\t(\n\t\tnode: Element,\n\t\tparams: CrossfadeParams & {\n\t\t\tkey: any;\n\t\t}\n\t) => () => TransitionConfig\n];",
        "children": []
      },
      {
        "name": "draw",
        "comment": "",
        "snippet": "declare function draw(\n\tnode: SVGElement & {\n\t\tgetTotalLength(): number;\n\t},\n\t{ delay, speed, duration, easing }?: DrawParams\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "fade",
        "comment": "",
        "snippet": "declare function fade(\n\tnode: Element,\n\t{ delay, duration, easing }?: FadeParams\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "fly",
        "comment": "",
        "snippet": "declare function fly(\n\tnode: Element,\n\t{ delay, duration, easing, x, y, opacity }?: FlyParams\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "scale",
        "comment": "",
        "snippet": "declare function scale(\n\tnode: Element,\n\t{ delay, duration, easing, start, opacity }?: ScaleParams\n): TransitionConfig;",
        "children": []
      },
      {
        "name": "slide",
        "comment": "",
        "snippet": "declare function slide(\n\tnode: Element,\n\t{ delay, duration, easing, axis }?: SlideParams\n): TransitionConfig;",
        "children": []
      }
    ]
  }
];